export default class Animation {

export default class SimpleAnimation {

import Animation from 'Animation.mjs'

import SimpleAnimation from 'SimpleAnimation.mjs'

import chroma from 'chroma-js'; //Again we want to be able to use chroma.

export default class Animation {
  //This constructor will take all of the properties that are common to all animations. This includes a looping property as well as a blending mode.
  constructor(looping = false, mode = 'lab') {
    //This line just makes sure we dont try to create an instance of Animation as it won't do anything on it's own. We will implement different animation types as sub-classes of Animation. So we won't run "new Animation(...)", instead we will run "new SimpleAnimation(...)"
    if (this.constructor === Animation) throw new TypeError("Animation should not be instantiated directly. Use one of the sub classes to create an animation.")
    //Store these settings on the animation.
    this.looping = looping;
    this.mode = mode;
  }

  //This funtion will let us check if this animation is going to modify a particular LED.
  hasPixel(index, time) {
    //The code we will write later will override this for each animation type. This is just to make sure we do so.
    throw new TypeError("You should not call Animation.hasPixel() this should be overriden by a sub class.")
  }

  //This function will get the color for a particular LED at a particular time.
  getLEDColor(index, time) {
    //The code we will write later will override this for each animation type. This is just to make sure we do so.
    throw new TypeError("You should not call Animation.getLEDColor() this should be overriden by a sub class.")
  }
}

import Animation from 'Animation.mjs';

export default class SimpleAnimation extends Animation {

import Animation from './Animation.mjs'

export default class CometAnimation extends Animation {

}

constructor(headColor, tailColor, tailLength, speed, from, to, loop = false, pingPong = false, mode = 'lab') {
  //A CometAnimation will have several properties.
  /*
  headColor: the color of the start of the 'comet'
  tailColor: the color of the tail of the 'comet'
  tailLength: how long (in LEDs) that comet is. That is how many LEDs behind the head will be fading out.
  speed: the speed of the comet in LEDs / second.
  from: the starting position of the comet as an LED index.
  to: the finishing position of the comet as an LED index.
  loop: whether the animation should loop.
  pingPong: whether when the animation is looping if the comet should reverse direction when it hits the ends or not. If this is true it will bounce between the from and to positions. If not the comet will return to the start and loop over.
  mode: the blending mode of the animation.
  */

  //Here the super keyword refers to the Animation class as that is the super-class of this CometAnimation class.
  super(loop, mode);//We pass loop and mode to the Animation type as they are common to all animations.
  //We then store all of these properties in the respective properies on the instance.
  this.headColor = chroma(headColor);
  this.tailColor = chroma(tailColor);
  this.tailLength = tailLength;
  this.speed = speed;
  this.pingPong = pingPong;
  this.from = from;
  this.to = to;
  //Length is just the length of the segment that this animation plays over.
  this.length = this.to - this.from;
  //totalTime is the total time it takes to play through 1 loop of this animation. For a pingPong animation this is how long it takes to reach the end and get back to the start. As mentioned before this is necessary for the AnimationManager to accept it.
  this.totalTime = (this.length / (this.speed/1000))*(this.looping&&this.pingPong?2:1);
}
//This is from the base Animation class. It returns whether this animation is controlling an LED at that particular point in time.
hasPixel(index, time) {

}

getLEDColor(index, time) {

}

getCometPos(time) {
  let p = time/this.totalTime;
  return this.length * (this.looping&&this.pingPong?2 * Math.min(1-p, p):p) + this.from;
}

//This will return the direction the comet is going at any point in time. It is 1 if it is heading to the right and -1 if going to the left. It is used to figure out what side the trail should come from.
getDirection(time) {
  //We check if this is a pingPong animation. If so we return 1 id the time is less then half the totalTime and -1 otherwise. If this isn't a pingPong animation we just return 1 as it is always positive.
  return this.looping&&this.pingPong?Math.sign(this.totalTime/2 - (time % this.totalTime)):1
}

let leftL  = this.getDirection(time)==1?1:this.tailLength;
let rightL = this.getDirection(time)==1?this.tailLength:1;

//This will get the alpha of a pixel at any point in time.
getPixelAlpha(index, time) {
  let leftL  = this.getDirection(time)==1?1:this.tailLength;
  let rightL = this.getDirection(time)==1?this.tailLength:1;
  let z = this.getCometPos(time);
  return Math.max(0, Math.min((z-index)/leftL + 1, (index-z)/rightL + 1))
}

let a = this.getPixelAlpha(index, time)//Here we calculate the alpha.
return chroma.mix(this.tailColor,this.headColor,a**2).alpha(a);//Here we raise a to the 2nd power for the mixing ratio and set the alpha to a. If the colors don't fade fast enough you can increase the 2 to a bigger number. The bigger the number the faster the head color will change to the tail color.

import SimpleAnimation from './SimpleAnimation.mjs';
import CometAnimation from './CometAnimation.mjs';

animations.set('cheer', new CometAnimation("#ff0000", "#ff7700", 10, 10, 0, 100))

//And after configuring the tmi client:

client.on('cheer', ()=>{
  animationManager.play(animations.get('cheer'))
})

const animations = [
  //There will be a few pre-defined animations here
]

